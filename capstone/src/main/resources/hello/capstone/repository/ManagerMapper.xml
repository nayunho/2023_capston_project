<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.capstone.repository.ManagerMapper">
   
	<insert id = "noticeCreate">
      insert into 
      
      notice(title, content, noticedate, memberidx) 
      
      values( #{title}, #{content}, #{noticeDate}, #{memberIdx}  );
   </insert>
   
   
   <select id = "noticeRead" resultType ="Map">
      select n.*, m.name
      
      from notice n 
      
      join member m on n.memberidx = m.memberidx
      
      where noticeidx = #{noticeIdx}
   </select>
   
   <update id="noticeUpdate">
      update notice

      set title = #{title}, content = #{content}, noticedate =#{noticeDate}, noticemodify = #{noticeModify}, memberidx = #{memberIdx}
      
      where noticeidx = #{noticeIdx}
   </update>
   
   <delete id ="noticeDelete">
      delete
      
      from notice
      
      where noticeidx = #{noticeIdx}
   </delete>
   
   <select id = "noticeReadAll" resultType ="Map">
      select n.*, m.name
      
      from notice n 
      
      join member m on n.memberidx = m.memberidx
      
      order by noticedate;
   </select>
	
	<select id ="noticeGetAlarm" resultType ="Map">
		select * from  notice
		where noticedate &gt;= DATE_SUB(NOW(), INTERVAL 24 HOUR);;
	</select>
	
	
	<select id="getMemberByRole">
    	select * 
        from member
        where role = #{role}
        order by name asc;;
   	</select>
   	
	<select id="getFailedReservation" resultType = "Map">
	select s.*, SUM(CASE WHEN r.confirm = 'false' THEN 1 ELSE 0 END) as duplicateCount, r.memberidx
	from shop s
	join reservation r on s.shopidx = r.shopidx
	where r.memberidx = #{memberIdx}
	group by r.shopidx
	order by s.shopname asc ;
   </select>
   
   <select id = "getFailedItems" resultType = "Map">
      select i.*, r.number, r.redate, r.confirm
      from item i
      join reservation r on i.itemidx = r.itemidx
      where r.shopidx = #{shopIdx} and r.memberidx = #{memberIdx}
      order by r.redate asc;
   </select>
   	
   	
   	<select id = "getShopinfoByBusiness">
   		select *
   		from shop
   		where owneridx = #{owneridx}
   		order by shopname asc;
   	</select>
   	
   	<select id = "getIteminfoByBusiness">
   		select *
   		from item
   		where shopidx = #{shopidx}
   		order by itemname asc;
   	</select>
   	
   	<select id = "getShopinfo" resultType="map">
		select s.*, COUNT(CASE WHEN r.confirm != 'false' THEN r.reservationidx END) as reservater
		from shop as s
		left join reservation as r
		on s.shopidx = r.shopidx
		group by s.shopidx
		order by shopname asc;
   	</select>
   	
   	<select id="getIteminfo" resultType="map">
		select i.itemidx, i.itemname, quantity, COUNT(CASE WHEN r.confirm != 'false' THEN r.reservationidx END) as reservater
		from item as i
		left join reservation as r
		on r.itemidx = i.itemidx
		where i.shopidx = #{shopidx}
		group by i.itemidx
		order by itemname asc;
   	</select>

   	<select id="getRatingNumber" resultType="map">
	   	SELECT r.rating, COALESCE(COUNT(rt.rating), 0) as rating_count
		FROM (
			    SELECT 0 AS rating
			    UNION ALL SELECT 1
			    UNION ALL SELECT 2
			    UNION ALL SELECT 3
			    UNION ALL SELECT 4
			    UNION ALL SELECT 5
			) AS r
		LEFT JOIN ratings AS rt 
		ON r.rating = rt.rating AND rt.shopidx = #{shopidx}
		GROUP BY r.rating
		ORDER BY r.rating;
   	</select>
   	
   	<select id="getRatingClient" resultType="map">
   		select m.* 
		from member as m
		left join ratings as r
		on m.memberidx = r.memberidx
		where r.rating = #{rating} and r.shopidx = #{shopidx}
		order by m.name asc;
   	</select>
   	
   	<select id="getReservationMember" resultType="Map">
		SELECT i.itemidx, i.itemname, m.memberidx, m.id, r.number, r.redate
		FROM reservation r
		JOIN member m ON r.memberidx = m.memberidx
		JOIN item i ON r.itemidx = i.itemidx
		WHERE r.shopidx = #{shopidx} and r.confirm != 'false';
   	</select>
   	
   	<select id = "getItemAll" resultType ="Map">
		select i.*, s.shopname
		from item i
		inner join shop s on i.shopidx = s.shopidx
		order by i.itemname asc , i.starttime asc;
	
	</select>
   	
</mapper>